#include <stdlib.h>
#include <stdio.h>
#include "string.h"
#include "gotoxy.h"

#define maxCaracteres 100

///Edad
#define edadMinima 12
#define edadMaxima 100
#define datoEdad "una edad valida |12-100|"

///Direccion
#define nDirecMinimo 1
#define nDirecMaximo 9999
#define datoNDirec "un numero de direccion valido |>99|"

///Telefono
#define nTelefonoMin 1000000
#define nTelefonoMax 9999999
#define datoNTelefono "numero de telefono valido |>0|"


///DNI
#define dniMinimo 10000000
#define dniMaximo 99999999
#define datoDni "un DNI valido |>0|"


///legajo
#define legajoMinimo 1
#define legajoMaximno 1000000000
#define datoLegajo "un legajo valido |>0|"

///pagos
#define pagosMinimo 0
#define pagosMaximo 2
#define datoPagos "un Pago valido |>0|"


///Curso
#define cursoMinimo 1
#define cursoMaximno 6
#define datoCurso "un curso valido |1 - 6|"

///INFO PERSONAL
typedef struct
{
    char nombre[30];
    char apellido [30];
    int edad;
    int dni;
    char calle[20];
    int numDir;
    long int numTelefono;
} informacionPersonal;

///ALUMNO

typedef struct
{
    int legajo;
    int pagos;
    int curso;
    char asistencia[1];
    informacionPersonal dato;
} alumno;


///LISTA

typedef struct nodoSimple
{
    struct nodoSimple* siguiente;
    alumno dato;
} nodoSimple;


///PROFESOR
typedef struct
{
    char materia[30];
    int sueldo;
    informacionPersonal dato;
} profesor;


///DECLARACIONES

alumno cargarAlumno();
informacionPersonal cargarInfoPersonal();
int validacionNumeros(char str[100], int min, int max, char dato[maxCaracteres]);
int validacionString(char string[maxCaracteres]);
void cargarEdad(informacionPersonal* info);
void cargarNDirec(informacionPersonal* info);
void cargarNTelefono(informacionPersonal* info);
int validarNTel(long nTel);
void cargarDNI(informacionPersonal* info);
void cargarLegajo(alumno* alumnito);
void cargarPagos(alumno* alumnito);
void cargarCurso(alumno* alumnito);
void cargarNombre(informacionPersonal* info);
void cargarApellido(informacionPersonal* info);
void cargarCalle(informacionPersonal* info);
void cargarAsistencia(alumno* alumnito);
void verInformacionDeAlumno(alumno alumnito);
alumno modificarDatosAlumno(alumno alumnito);
void CargarArchivoDeAlumnos();
void CargarArchivoDeProfesores();
void verAlumnosEnArchivo();
profesor modificarDatosProfesor(profesor profe);
profesor cargarProfesor();




const char archivoAlumnos[40]= "archivoAlumnos.bin";
const char archivoProfesores[40]="archivoProfesores.bin";


int main()
{
    color(9);
    centrarTexto("BIENVENIDO!", 0);
    centrarTexto("Colegio UTN", 2);
    centrarTexto("Nivel Secundario", 4);
    centrarTexto("Desde 1999", 6);

    centrarTexto("Avenida Dorrego 281", 10);
    centrarTexto("Mar del plata, Buenos Aires", 12);
    centrarTexto("TEL: 480-1220", 14);
    centrarTexto("--------------------------------------", 16);
    color(15);

    char verInfoAlumno = 's';
    alumno alumnito = cargarAlumno();

    printf("Desea ver la informacion del alumno? s/n \n");
    fflush(stdin);
    scanf("%c", &verInfoAlumno);
    if(verInfoAlumno=='s')
    {
        verInformacionDeAlumno(alumnito);
    }

    alumnito=modificarDatosAlumno(alumnito);

    verInformacionDeAlumno(alumnito);
    return 0;
}


///funcion main de carga de un alumno
alumno cargarAlumno()
{

    alumno aux;

    printf("\n--------------CARGAR ALUMNO--------------\n");


    cargarLegajo(&aux);

    cargarPagos(&aux);

    cargarCurso(&aux);

    cargarAsistencia(&aux);

    aux.dato = cargarInfoPersonal();


    return aux;
}

///funcion main de carga de informacion personal
informacionPersonal cargarInfoPersonal()
{


    informacionPersonal aux;


    printf("\n--------------INFORMACION PERSONAL --------------\n");

    cargarNombre(&aux);

    cargarApellido(&aux);

    cargarEdad(&aux);

    cargarDNI(&aux);

    cargarCalle(&aux);

    cargarNDirec(&aux);

    cargarNTelefono(&aux);


    return aux;
}


///validacion de tipo de dato int
int validacionNumeros(char str[100], int min, int max, char dato[maxCaracteres])
{
    char *endptr;
    long num = strtol(str, &endptr, 10);
    int valido =0;
    int conv;

    conv = (int)num;
    if (*endptr == '\0' && conv >= min && conv <= max )
    {
        valido = 1;
    }
    else
    {
        while (valido == 0)
        {
            printf("Ingrese %s\n NUMERO:", dato);
            gets(str);
            num = strtol(str, &endptr, 10);
            conv = (int)num;
            if (*endptr == '\0' && conv >= min && conv <= max)
            {
                valido = 1;

            }
        }
    }
    conv = (int)num;
    return conv;
}


///validacion de tipo de dato char/string
int validacionString(char string[maxCaracteres])
{

    int cantidadCaracteres = strlen(string);
    int i;

    for (i = 0; i < cantidadCaracteres; i++)
    {
        char caracter = string[i];

        if (isalpha(caracter) == 0)
        {
            return 0;
        }
    }

    return 1;
}


int validarStringNombre(char nombre[])
{
    for(int i=0; i<strlen(nombre); i++)
    {
        if(!isalpha(nombre[i]) && !isspace(nombre[i]))
        {
            return 0;
        }
    }
    return 1;
}



///cargar edad
void cargarEdad(informacionPersonal* info)
{

    int operador = -1;
    char strOpcion[maxCaracteres];

    printf("\n EDAD: ");
    fflush(stdin);
    gets(strOpcion);

    while(operador < 0)
    {
        operador = validacionNumeros(strOpcion,edadMinima,edadMaxima, datoEdad);

        if (operador > edadMinima && operador < edadMaxima)
        {
            info->edad= operador;
            break;
        }
    }

}

///cargar numero de direccion
void cargarNDirec(informacionPersonal* info)
{

    int operador = -1;
    char strOpcion[maxCaracteres];

    printf("\n N째 DIRECCION: ");
    fflush(stdin);
    gets(strOpcion);

    while(operador < 0)
    {
        operador = validacionNumeros(strOpcion,nDirecMinimo,nDirecMaximo, datoNDirec);

        if (operador > nDirecMinimo && operador < nDirecMaximo)
        {
            info->numDir= operador;
            break;
        }
    }

}



///cargar numero de telefono
void cargarNTelefono(informacionPersonal* info)
{
    long nTel;

    printf("\n N째 DE TELEFONO (sin prefijo): ");
    scanf("%ld", &nTel);

    int validar = validarNTel(nTel);

    while(validar != 1)
    {

        printf("\n Ingresar N째 de telefono correcto: ");
        scanf("%ld", &nTel);

        validar = validarNTel(nTel);

    }

    info->numTelefono = nTel;

}

///validacion de tipo de dato long int
int validarNTel(long nTel)
{
    if((long)nTel >= nTelefonoMin && (long)nTel <= nTelefonoMax)
    {
        return 1;

    }
    return 0;
}


///carga de N째 DNI
void cargarDNI(informacionPersonal* info)
{

    int operador = -1;
    char strOpcion[maxCaracteres];

    printf("\n DNI: ");
    fflush(stdin);
    gets(strOpcion);

    while(operador < 0)
    {
        operador = validacionNumeros(strOpcion,dniMinimo,dniMaximo, datoDni);

        if (operador > dniMinimo && operador < dniMaximo)
        {
            info->dni = operador;
            break;
        }
    }
}


///carga de legajo
void cargarLegajo(alumno* alumnito)
{

    int operador = -1;
    char strOpcion[maxCaracteres];

    printf("\n LEGAJO: ");
    fflush(stdin);
    gets(strOpcion);

    while(operador < 0)
    {
        operador = validacionNumeros(strOpcion,legajoMinimo,legajoMaximno, datoLegajo);

        if (operador > legajoMinimo && operador < legajoMaximno)
        {
            alumnito->legajo = operador;
            break;
        }
    }
}

///carga de pagos
void cargarPagos(alumno* alumnito)
{

    int operador = -1;
    char strOpcion[maxCaracteres];

    printf("\n----PAGOS----\n|0 deuda|\n|1 pago parcial|\n|2 total pagado|\n ");
    fflush(stdin);
    gets(strOpcion);

    while(operador < 0)
    {
        operador = validacionNumeros(strOpcion,pagosMinimo,pagosMaximo, datoPagos);

        if (operador > pagosMinimo && operador < pagosMaximo)
        {
            alumnito->pagos = operador;
            break;
        }
    }
}

///carga de curso
void cargarCurso(alumno* alumnito)
{

    int operador = -1;
    char strOpcion[maxCaracteres];

    printf("\n CURSO: ");
    fflush(stdin);
    gets(strOpcion);

    while(operador < 0)
    {
        operador = validacionNumeros(strOpcion,cursoMinimo,cursoMaximno, datoCurso);

        if (operador > cursoMinimo && operador < cursoMaximno)
        {
            alumnito->curso = operador;
            break;
        }
    }
}

///carga de nombre
void cargarNombre(informacionPersonal* info)
{
    char nombre[maxCaracteres];
    printf("\n NOMBRE: ");

    fflush(stdin);
    fgets(nombre, maxCaracteres, stdin);

    int valido = validarStringNombre(nombre);


    if(valido == 1)
    {
        strcpy(info->nombre, nombre);
    }

    else if(valido == 0)
    {

        while (valido == 0)
        {

            printf("Ingrese un nombre valido\n NOMBRE: ");
            fflush(stdin);
            fgets(nombre, 50, stdin);

            valido = validarStringNombre(nombre);

        }
    }

    strcpy(info->nombre, nombre);
}

///carga de apellido
void cargarApellido(informacionPersonal* info)
{
    char apellido[maxCaracteres];
    printf("\n APELLIDO: ");

    fflush(stdin);
    fgets(apellido, maxCaracteres, stdin);


    int valido = validarStringNombre(apellido);


    if(valido == 1)
    {
        strcpy(info->apellido, apellido);
    }

    else if(valido == 0)
    {

        while (valido == 0)
        {

            printf("Ingrese un apellido valido\n APELLIDO: ");
            fflush(stdin);
            fgets(apellido, maxCaracteres, stdin);


            valido = validarStringNombre(apellido);

        }
    }

    strcpy(info->apellido, apellido);
}

///carga de nombre de calle
void cargarCalle(informacionPersonal* info)
{
    char calle[maxCaracteres];
    printf("\n CALLE: ");

    fflush(stdin);
    gets(calle);

    int valido = validacionString(calle);


    if(valido == 1)
    {
        strcpy(info->calle, calle);
    }

    else if(valido == 0)
    {

        while (valido == 0)
        {

            printf("Ingrese una calle valida\n CALLE: ");
            fflush(stdin);
            gets(calle);

            valido = validacionString(calle);

        }
    }

    strcpy(info->calle, calle);
}

///carga de asistencia
void cargarAsistencia(alumno* alumnito)
{
    char asistencia[maxCaracteres];
    printf("\n ASISTENCIA: ");

    fflush(stdin);
    gets(asistencia);

    int valido = validacionString(asistencia);


    if((valido == 1) && (strcmpi(asistencia, "p") == 0) && (strcmpi(asistencia, "a")))
    {
        strcpy(alumnito->asistencia, asistencia);
    }

    else if(valido == 0 || ((strcmpi(asistencia, "p") != 0) && (strcmpi(asistencia, "a"))))
    {

        while (valido == 0 || ((strcmpi(asistencia, "p") != 0) && (strcmpi(asistencia, "a"))))
        {

            printf("Ingrese una opcion valida |A/a - P/p|\n ASISTENCIA: ");
            fflush(stdin);
            gets(asistencia);

            valido = validacionString(asistencia);

        }
    }

    strcpy(alumnito->asistencia, asistencia);
}

void verInformacionDeAlumno(alumno alumnito)
{
    printf("\n--------------Informacion escolar del alumno--------------\n");

    printf("Legajo: %i\n", alumnito.legajo);

    printf("Curso: %i\n", alumnito.curso);

    printf("Pagos: ");

    if(alumnito.pagos==0)
    {
        printf("Presenta deuda.\n");
    }
    else if(alumnito.pagos==1)
    {
        printf("Hay un pago parcial.\n");
    }
    else
    {
        printf("No presenta deuda.\n");
    }
    printf("\n--------------Informacion personal del alumno--------------\n");

    printf("\n-Nombre y apellido: %s, %s \n", alumnito.dato.apellido, alumnito.dato.nombre);

    printf("\n-N째 de DNI: %i\n", alumnito.dato.dni);

    printf("\n-Edad: %i\n", alumnito.dato.edad);

    printf("\n-Calle: %s\n", alumnito.dato.calle);

    printf("\n-N째 de direccion: %i\n", alumnito.dato.numDir);

    printf("\n-N째 de telefono: %ld\n", alumnito.dato.numTelefono);
}

alumno modificarDatosAlumno(alumno alumnito)
{
    int num=0;
    char seguir='s';

    printf("Desea modificar un dato del alumno? s/n \n");
    fflush(stdin);
    scanf("%c", &seguir);

    while(seguir=='s')
    {
        printf("Que dato desea modificar?\n 1- Nombre \n 2- Apellido \n 3- N째 DNI \n 4- Edad \n 5- N째 direccion \n  6- Calle \n 7- N째 telefono \n \n");
        scanf("%i", &num);

        if(num==1)
        {
            cargarNombre(&alumnito.dato);
        }
        else if(num==2)
        {
            cargarApellido(&alumnito.dato);
        }
        else if(num==3)
        {
            cargarDNI(&alumnito.dato);
        }
        else if(num==4)
        {
            cargarEdad(&alumnito.dato);
        }
        else if(num==5)
        {
            cargarNDirec(&alumnito.dato);
        }
        else if(num==6)
        {
            cargarCalle(&alumnito.dato);
        }
        else if(num==7)
        {
            cargarNTelefono(&alumnito.dato);
        }
        else
        {
            printf("Esa no es una opcion correcta. \n");
        }

        printf("Desea modificar otro dato? \n");
        fflush(stdin);
        scanf("%c", &seguir);
    }
    return alumnito;
}

void CargarArchivoDeAlumnos()
{
    FILE* buffer=fopen(archivoAlumnos, "ab");
    alumno aux;
    char seguir='s';

    if(buffer)
    {
        while(seguir=='s')
        {
            aux=cargarAlumno();
            fwrite(&aux, sizeof(alumno),1,buffer);

            printf("Desea cargar otro alumno? \n");
            fflush(stdin);
            scanf("%c", &seguir);
        }
        fclose(buffer);
    }
}

void CargarArchivoDeProfesores()
{
    FILE* buffer=fopen(archivoProfesores, "ab");
    profesor aux;
    char seguir='s';

    if(buffer)
    {
        while(seguir=='s')
        {
            aux=cargarProfesor();
            fwrite(&aux, sizeof(profesor),1,buffer);

            printf("Desea cargar otro profesor? \n");
            fflush(stdin);
            scanf("%c", &seguir);
        }
        fclose(buffer);
    }
}

void verAlumnosEnArchivo()
{
    FILE* buffer=fopen(archivoAlumnos, "rb");
    alumno aux;

    if(buffer)
    {
        while(fread(&aux,sizeof(alumno),1,buffer)>0)
        {
            verInformacionDeAlumno(aux);
        }
        fclose(buffer);
    }
}

profesor modificarDatosProfesor(profesor profe)
{
    int num=0;
    char seguir='s';

    printf("Desea modificar un dato del profesor? s/n \n");
    fflush(stdin);
    scanf("%c", &seguir);

    while(seguir=='s')
    {
        printf("Que dato desea modificar?\n 1- Nombre \n 2- Apellido \n 3- N째 DNI \n 4- Edad \n 5- N째 direccion \n  6- Calle \n 7- N째 telefono \n \n");
        scanf("%i", &num);

        if(num==1)
        {
            cargarNombre(&profe.dato);
        }
        else if(num==2)
        {
            cargarApellido(&profe.dato);
        }
        else if(num==3)
        {
            cargarDNI(&profe.dato);
        }
        else if(num==4)
        {
            cargarEdad(&profe.dato);
        }
        else if(num==5)
        {
            cargarNDirec(&profe.dato);
        }
        else if(num==6)
        {
            cargarCalle(&profe.dato);
        }
        else if(num==7)
        {
            cargarNTelefono(&profe.dato);
        }
        else
        {
            printf("Esa no es una opcion correcta. \n");
        }

        printf("Desea modificar otro dato? \n");
        fflush(stdin);
        scanf("%c", &seguir);
    }
    return profe;
}

profesor cargarProfesor()
{
    profesor aux;

    printf("\n--------------CARGAR PROFESOR--------------\n");

    cargarMateria(&aux);

    cargarSueldo(&aux);

    aux.dato = cargarInfoPersonal();

    return aux;
}

void centrarTexto(char texto[], int y)
{
    int tamanio=strlen(texto);
    gotoxy(90-(tamanio/2), y);
    printf("%s \n",texto);
}
